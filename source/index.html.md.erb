---
title: Smartsettle API Docs

language_tabs: # must be one of https://git.io/vQNgJ
  - shell

toc_footers:
  - <a href='https://go.smartsettle.com/'>Get an API Key</a>
  - <a href='https://go.smartsettle.com/'>Smartsettle</a>

includes:
  - errors

search: true
---

# Introduction

Welcome to the Smartsettle API v1! You can use our API to access your negotiations, parties, and more!

Some of our API follows the <a href='http://jsonapi.org/format/' target='_blank'>JSON API v1 Format</a>.

If you need help with anything contained in the documentation, please reach out to [developer.support@smartsettle.com](mailto:developer.support@smartsettle.com).

> API responses will look like this:

```json
{
  "data": {
    "type": "negotiation",
    "id": "1",
    "attributes": {
      // ... this negotiation's attributes
    },
    "relationships": {
      // ... this negotiation's relationships
    }
  }
}
```

# General Usage Strategies

## Whitelabel

Quickly get started using Smartsettle ONE to handle negotiations. Adjust our existing web application branding and case intake process to fit your needs. We deploy your app instance to its own hardware stack at any of the major cloud providers to suite your specifc requirements. There are various Single Sign On (SSO) solutions we can impletment for your users in order to provide a seamless transition to and from your existing web application. This solution may not require any software development on your end.

## Standalone Slider Widget (slider.js) + API + Whitelabel (configuration/tools/insights)

Drop our negotiation javascript solution into your existing intake and case management process. Use our API to initalize and retreive existing data. Use whitelabel account management interface to build your own negotiation scenarios. This strategy provides the most seamless integration of our negotiation solution into your own application.

<%= image_tag "images/slider2.png" %>

### General Configuration

Some configuration within the whitelabel application is required before the slider can be rendered:

#### 1. Create at least one Negotiation Template

A negotiation template defines a specific scenario: default party names, default issues, party intake steps, and an associated Agreement Framework. The party intake steps are only relevant to the whitelabel use case. In the 

#### 2. Use one of our default Agreement Frameworks or create your own

All Negotiation Templates need an associated Agreement Framework. The agreement framework step is optional but recommended. All parties need to agree to the Framework before a Negotiation can be carried out. If you wish to skip this requirement, it is possible to automate this for both parties. 

#### 3. Configure your Expert Neutral Deal-closer (END) preferences in the account settings area. It is possible to disable this feature if desired.

#### 4. Create/Sync Users with the Smartsettle ONE whitelabel instance.

### Slider integration steps

> Sample Ruby Implementation

```ruby
# Step 1
@negotiation = SmartsettleApi.user(current_user).create_negotiation("mode": "normal",
                                                                    "negotiation_template_id": 123,
                                                                    "name": 'Case 123: Party A v Party B'
                                                                    "invitee_party_email": 'party_a@example.com',
                                                                    "creator_short_name": 'Party B',
                                                                    "invitee_party_short_name": "Party A")

# Step 2
@negotiation.issue_ids.each do |issue_id|
  SmartsettleApi.user(current_user).update_issue_preferences(issue_id, user: 1000, opponent: 0)
end

# Step 3
SmartsettleApi.user(current_user).update_framework_acceptance(@negotiation.id, status: 'accept')
SmartsettleApi.user(opponent).update_framework_acceptance(@negotiation.id, status: 'accept')

# Step 4
redirect_to "/dashboard/negotiations/#{@negotiation.id}"
```

Before the slider can be rendered, you need a Negotiation with all the details required for a negotiation completed.

The steps required to integrate the slider.js into your own app might look like this:

1. Create the negotiation using the API **Negotiation -> Create** endpoint.
1. Set the issues preferences for each of the parties and issues using the API **Negotiation -> Update Issue Preference** endpoint.
1. Update the Framework acceptance for each of the parties using the API **Negotiation -> Update Framework Acceptance** endpoint. This is generally hooked up the action were parties both agree to the draft Framework. (Optional, you can do this behind the scenes in order to skip this step. In ONE, both parties must agree to the issues and inital negotiating ranges before the negotiation can begin.)
1. Render the slider.js (see [Standalone Slider Widget](#standalone-slider-widget-slider-js-api-whitelabel-configuration-tools-insights))

# Javascript Widgets

## Negotiations Slider

### Integrate the Smartsettle ONE Slider into your own site

### Overview

You can allow users to realize Smartsettle ONE negotiations directly on your own site. By adding a few lines of HTML and Javascript you can include the slider on a page so your users can negotiate on a specific case using the slider.

### Including the slider

Include the necessary slider JS and CSS files on the page you want to show the slider as shown in the following HTML snippet.

> Include the necessary slider JS and CSS

```html
<!-- Include this line in the head -->
<link rel="stylesheet" href="https://smartsettle-public.s3.ca-central-1.amazonaws.com/slider/2/slider.css" />

<!-- Include this line at the end of the body -->
<script src="https://smartsettle-public.s3.ca-central-1.amazonaws.com/slider/2/slider.slim.js"></script>
```

Now we just need to create an instance of the slider. In order to do that we need to know: 
 
  - The URL pointing to the API it should get it's data from
  - The ID of the negotiation case it should display
  - The credentials for the user interacting with the slider

> Create an instance of the slider

```javascript
 var apiEndpoint = 'https://go.smartsettle.com/api/v1';
 
 new SmartsettlePanel(
   '#element-id',      // HTML node id. Slider will be placed here.
   apiEndpoint,        // API for the data
   2470,               // Id of the negotiation
   'user@example.com', // User identifier
   'users-api-key'     // ONE API key for user
 );
```

Replace all the parameters for SmartsettlePanel with values that would make sense in your context. Now you should be able to see the slider on your page. Enjoy! 


> You might also need to include the following JS and CSS

```html
<!-- 
NOTE:
The above HTML assumes you're already using and including Bootstrap 3 and JQuery. 
The slider has several modal dialogs which currently depend on these two. 
If you're not using Bootstrap 3 and JQuery you should add them at least on 
the page you want to show the slider. The following lines include the necessary 
slider JS and CSS files for Bootstrap 3, JQuery and the Slider itself.
-->

<!-- In header -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css" />
<link rel="stylesheet" href="https://smartsettle-public.s3.ca-central-1.amazonaws.com/slider/2/slider.css" />

<!-- At end of body -->
<script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"></script> 
<script src="https://smartsettle-public.s3.ca-central-1.amazonaws.com/slider/2/slider.slim.js"></script>
```

## Agreement Framework Viewer

### Coming Soon!

This widget will allow parties to view and accept the agreement framework for a specific negotiation.

# Authentication

Smartsettle uses your API key and email to authenticate with the API.

Smartsettle expects your API key and email to be included in all API requests to the server. You can include key key pair in the request headers or as url parameters.

> To authorize, use this code:

```shell
# With shell, you can need to pass the correct headers with each request
curl "api_endpoint_here"
  -H "X-User-Email: example@example.com" -H "X-User-Token: 123abc"
```

> Make sure to replace `123abc` with your API key.

# Negotiation

## List Negotiations

```shell
# Example:
curl --get "https://go.smartsettle.com/api/v1/negotiations?page=1&per_page=50&ordering=your_role&search=settlement"
```

Smartsettle provides an api endpoint to retreive, filter, and order Negotiations.

The Negotiations API endpoint supports the following parameters:

Parameter | Acceptable Values | Result | Default
---------- | ------- | ------- | -------
search | String | Negotiations with a name or description matching your String. | null
ordering | String - default ascending, prefix with `-` for descending - `id`, `name`, `your_role`, `other_party`, `party_waiting_on`, `session_number`, `status`, `last_update` | Orders the results based on the defined value | `last_update DESC`
page | Int | Paginates Negotiations | 1
facilitating | boolean | By default, only the negotiations you are a party in are returned by the API. By setting this to true, negotiations that you are facilitating but not a party in are returned | false
per_page | Int | Defines the amount of Negotiations per page | 20

## Retrieve a Negotiation

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id"
```

> Sample Response

```json
{
  "negotiation": {
    "id": 285,
    "description": null,
    "creator_user_id": 1,
    "negotiation_template_id": 10,
    "current_session_number": 1,
    "current_agreement_framework": 283,
    "agreement_timestamp": null,
    "arbitration_enabled": null,
    "status": "active_sessions",
    "created_at": "2017-07-19T23:14:33.052Z",
    "updated_at": "2017-07-19T23:14:36.772Z",
    "creator_type": "party",
    "mode": "practice",
    "your_role": "JILL",
    "other_party": "GEORGE",
    "party_waiting_on": "You",
    "last_update": "19 Jul 23:14",
    "status_msg": "Active negotiation",
    "other_party_availibility": "offline",
    "url": "http://localhost:3000/negotiations/285",
    "name": "Collaborative George & Jill Spousal Support",
    "final_session": false,
    "all_accepted_framework": false
  }
}
```

Retrieve information about specific negotiation. All you need to know is the negotiation id.

## Update Acceptance

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/update_acceptance"
```

> Sample Response

```json
{
  "issue_id": "298",
  "acceptance": 100,
  "issue_slider_details": {
    "negotiation_id": 285,
    "negotiation_status": "active_sessions",
    "current_session": 1,
    "your_party_id": 556,
    "your_party_status": "active",
    "your_party_issue_preference_set": true,
    "other_party_id": 557,
    "other_party_status": "active",
    "other_party_issue_preference_set": true,
    "issue_id": 298,
    "issue_name": "Amount of spousal support to be paid",
    "issue_description": "Amount of spousal support to pay",
    "issue_formatted_description": "Amount of spousal support to pay (CAD)",
    "has_proposed": false,
    "has_accepted": true,
    "other_party_has_proposed": false,
    "other_party_has_accepted": false,
    "your_party_issue_preference": "higher",
    "preferred_value": 900,
    "unpreferred_value": 500,
    "grid_increment": 10,
    "visible_proposal": 900,
    "acceptance": 900,
    "initial_proposal": 900,
    "walkaway": 500,
    "counter_proposal": 500,
    "counter_initial_proposal": 500,
    "has_set_initial_proposal": false,
    "has_walkaway": "no",
    "other_party_issue_preference": "lower",
    "suggestion_set": [
      500,
      510,
      520,
      530,
      540,
      550,
      560,
      570,
      580,
      590,
      600,
      610,
      620,
      630,
      640,
      650,
      660,
      670,
      680,
      690,
      700,
      710,
      720,
      730,
      740,
      750,
      760,
      770,
      780,
      790,
      800,
      810,
      820,
      830,
      840,
      850,
      860,
      870,
      880,
      890,
      900
    ],
    "session_data": [
      100
    ],
    "acceptance_on_grid": true,
    "proposal_on_grid": true
  },
  "negotiation": {
    "id": 285,
    "status": "active_sessions",
    "current_session_number": 1,
    "negotiation_status": "Session 1 - waiting for you to make an initial proposal",
    "arbitration_enabled": true,
    "show_guided_help": true,
    "your_party": {
      "id": 556,
      "name": "Derek Barber",
      "role": "Party A",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "accepted",
      "can_end_session": false,
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "yes",
      "has_proposed": "no"
    },
    "other_party": {
      "id": 557,
      "name": "George",
      "role": "Party B",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "unaccepted",
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "session": {
      "final_session": "no"
    },
    "af": {
      "is_configured": "yes",
      "status": "ready",
      "party_lock_id": 0
    },
    "slider_grids_params": {
      "issue_298": {
        "negotiation_id": 285,
        "negotiation_status": "active_sessions",
        "current_session": 1,
        "your_party_id": 556,
        "your_party_status": "active",
        "your_party_issue_preference_set": true,
        "other_party_id": 557,
        "other_party_status": "active",
        "other_party_issue_preference_set": true,
        "issue_id": 298,
        "issue_name": "Amount of spousal support to be paid",
        "issue_description": "Amount of spousal support to pay",
        "issue_formatted_description": "Amount of spousal support to pay (CAD)",
        "has_proposed": false,
        "has_accepted": true,
        "other_party_has_proposed": false,
        "other_party_has_accepted": false,
        "your_party_issue_preference": "higher",
        "preferred_value": 900,
        "unpreferred_value": 500,
        "grid_increment": 10,
        "visible_proposal": 900,
        "acceptance": 900,
        "initial_proposal": 900,
        "walkaway": 500,
        "counter_proposal": 500,
        "counter_initial_proposal": 500,
        "has_set_initial_proposal": false,
        "has_walkaway": "no",
        "other_party_issue_preference": "lower",
        "suggestion_set": [
          500,
          510,
          520,
          530,
          540,
          550,
          560,
          570,
          580,
          590,
          600,
          610,
          620,
          630,
          640,
          650,
          660,
          670,
          680,
          690,
          700,
          710,
          720,
          730,
          740,
          750,
          760,
          770,
          780,
          790,
          800,
          810,
          820,
          830,
          840,
          850,
          860,
          870,
          880,
          890,
          900
        ],
        "session_data": [
          100
        ],
        "acceptance_on_grid": true,
        "proposal_on_grid": true
      }
    }
  },
  "success": true,
  "message": "Acceptance has been updated"
}
```

Update the current parties acceptance value for the current negotiation session.

Parameter | Acceptable Values  | Required
---------- | -------  | -------
issue_id | Integer | yes
acceptance | Integer | yes


## Update Visible Proposal

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/update_visible_proposal"
```

> Sample Response

```json
{
  "issue_id": "298",
  "visible_proposal": 840,
  "issue_slider_details": {
    "negotiation_id": 285,
    "negotiation_status": "active_sessions",
    "current_session": 1,
    "your_party_id": 556,
    "your_party_status": "active",
    "your_party_issue_preference_set": true,
    "other_party_id": 557,
    "other_party_status": "active",
    "other_party_issue_preference_set": true,
    "issue_id": 298,
    "issue_name": "Amount of spousal support to be paid",
    "issue_description": "Amount of spousal support to pay",
    "issue_formatted_description": "Amount of spousal support to pay (CAD)",
    "has_proposed": true,
    "has_accepted": true,
    "other_party_has_proposed": false,
    "other_party_has_accepted": false,
    "your_party_issue_preference": "higher",
    "preferred_value": 900,
    "unpreferred_value": 500,
    "grid_increment": 10,
    "visible_proposal": 840,
    "acceptance": 840,
    "initial_proposal": 840,
    "has_set_initial_proposal": true,
    "has_walkaway": "no",
    "other_party_issue_preference": "lower",
    "suggestion_set": [
      500,
      510,
      520,
      530,
      540,
      550,
      560,
      570,
      580,
      590,
      600,
      610,
      620,
      630,
      640,
      650,
      660,
      670,
      680,
      690,
      700,
      710,
      720,
      730,
      740,
      750,
      760,
      770,
      780,
      790,
      800,
      810,
      820,
      830,
      840,
      850,
      860,
      870,
      880,
      890,
      900
    ],
    "session_data": [
      840
    ],
    "acceptance_on_grid": true,
    "proposal_on_grid": true
  },
  "negotiation": {
    "id": 285,
    "status": "active_sessions",
    "current_session_number": 1,
    "negotiation_status": "Session 1 - waiting for George's proposal.",
    "arbitration_enabled": true,
    "show_guided_help": true,
    "your_party": {
      "id": 556,
      "name": "Derek Barber",
      "role": "Party A",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "accepted",
      "can_end_session": true,
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "yes",
      "has_proposed": "yes"
    },
    "other_party": {
      "id": 557,
      "name": "George",
      "role": "Party B",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "unaccepted",
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "session": {
      "final_session": "no"
    },
    "af": {
      "is_configured": "yes",
      "status": "ready",
      "party_lock_id": 0
    },
    "slider_grids_params": {
      "issue_298": {
        "negotiation_id": 285,
        "negotiation_status": "active_sessions",
        "current_session": 1,
        "your_party_id": 556,
        "your_party_status": "active",
        "your_party_issue_preference_set": true,
        "other_party_id": 557,
        "other_party_status": "active",
        "other_party_issue_preference_set": true,
        "issue_id": 298,
        "issue_name": "Amount of spousal support to be paid",
        "issue_description": "Amount of spousal support to pay",
        "issue_formatted_description": "Amount of spousal support to pay (CAD)",
        "has_proposed": true,
        "has_accepted": true,
        "other_party_has_proposed": false,
        "other_party_has_accepted": false,
        "your_party_issue_preference": "higher",
        "preferred_value": 900,
        "unpreferred_value": 500,
        "grid_increment": 10,
        "visible_proposal": 840,
        "acceptance": 840,
        "initial_proposal": 840,
        "has_set_initial_proposal": true,
        "has_walkaway": "no",
        "other_party_issue_preference": "lower",
        "suggestion_set": [
          500,
          510,
          520,
          530,
          540,
          550,
          560,
          570,
          580,
          590,
          600,
          610,
          620,
          630,
          640,
          650,
          660,
          670,
          680,
          690,
          700,
          710,
          720,
          730,
          740,
          750,
          760,
          770,
          780,
          790,
          800,
          810,
          820,
          830,
          840,
          850,
          860,
          870,
          880,
          890,
          900
        ],
        "session_data": [
          840
        ],
        "acceptance_on_grid": true,
        "proposal_on_grid": true
      }
    }
  },
  "success": true,
  "message": "Visible Proposal has been updated"
}
```
Update the visible proposal for a specific issue.

Parameter | Acceptable Values  | Required
---------- | -------  | -------
issue_id | Integer | yes
visible_proposal | Integer | yes

## Update Acceptance & Visible Proposal

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/update_acceptance_and_visible_proposal"
```

> Sample Response

```json
{
  "issue_id": "298",
  "visible_proposal": 840,
  "issue_slider_details": {
    "negotiation_id": 285,
    "negotiation_status": "active_sessions",
    "current_session": 1,
    "your_party_id": 556,
    "your_party_status": "active",
    "your_party_issue_preference_set": true,
    "other_party_id": 557,
    "other_party_status": "active",
    "other_party_issue_preference_set": true,
    "issue_id": 298,
    "issue_name": "Amount of spousal support to be paid",
    "issue_description": "Amount of spousal support to pay",
    "issue_formatted_description": "Amount of spousal support to pay (CAD)",
    "has_proposed": true,
    "has_accepted": true,
    "other_party_has_proposed": false,
    "other_party_has_accepted": false,
    "your_party_issue_preference": "higher",
    "preferred_value": 900,
    "unpreferred_value": 500,
    "grid_increment": 10,
    "visible_proposal": 840,
    "acceptance": 840,
    "initial_proposal": 840,
    "has_set_initial_proposal": true,
    "has_walkaway": "no",
    "other_party_issue_preference": "lower",
    "suggestion_set": [
      500,
      510,
      520,
      530,
      540,
      550,
      560,
      570,
      580,
      590,
      600,
      610,
      620,
      630,
      640,
      650,
      660,
      670,
      680,
      690,
      700,
      710,
      720,
      730,
      740,
      750,
      760,
      770,
      780,
      790,
      800,
      810,
      820,
      830,
      840,
      850,
      860,
      870,
      880,
      890,
      900
    ],
    "session_data": [
      840
    ],
    "acceptance_on_grid": true,
    "proposal_on_grid": true
  },
  "negotiation": {
    "id": 285,
    "status": "active_sessions",
    "current_session_number": 1,
    "negotiation_status": "Session 1 - waiting for George's proposal.",
    "arbitration_enabled": true,
    "show_guided_help": true,
    "your_party": {
      "id": 556,
      "name": "Derek Barber",
      "role": "Party A",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "accepted",
      "can_end_session": true,
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "yes",
      "has_proposed": "yes"
    },
    "other_party": {
      "id": 557,
      "name": "George",
      "role": "Party B",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "unaccepted",
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "session": {
      "final_session": "no"
    },
    "af": {
      "is_configured": "yes",
      "status": "ready",
      "party_lock_id": 0
    },
    "slider_grids_params": {
      "issue_298": {
        "negotiation_id": 285,
        "negotiation_status": "active_sessions",
        "current_session": 1,
        "your_party_id": 556,
        "your_party_status": "active",
        "your_party_issue_preference_set": true,
        "other_party_id": 557,
        "other_party_status": "active",
        "other_party_issue_preference_set": true,
        "issue_id": 298,
        "issue_name": "Amount of spousal support to be paid",
        "issue_description": "Amount of spousal support to pay",
        "issue_formatted_description": "Amount of spousal support to pay (CAD)",
        "has_proposed": true,
        "has_accepted": true,
        "other_party_has_proposed": false,
        "other_party_has_accepted": false,
        "your_party_issue_preference": "higher",
        "preferred_value": 900,
        "unpreferred_value": 500,
        "grid_increment": 10,
        "visible_proposal": 840,
        "acceptance": 840,
        "initial_proposal": 840,
        "has_set_initial_proposal": true,
        "has_walkaway": "no",
        "other_party_issue_preference": "lower",
        "suggestion_set": [
          500,
          510,
          520,
          530,
          540,
          550,
          560,
          570,
          580,
          590,
          600,
          610,
          620,
          630,
          640,
          650,
          660,
          670,
          680,
          690,
          700,
          710,
          720,
          730,
          740,
          750,
          760,
          770,
          780,
          790,
          800,
          810,
          820,
          830,
          840,
          850,
          860,
          870,
          880,
          890,
          900
        ],
        "session_data": [
          840
        ],
        "acceptance_on_grid": true,
        "proposal_on_grid": true
      }
    }
  },
  "success": true,
  "message": "Visible Proposal & Acceptance have been updated"
}
```

Update the visible proposal and acceptance to the same value for a specific issue.

Parameter | Acceptable Values  | Required
---------- | -------  | -------
issue_id | Integer | yes
visible_proposal | Integer | yes

## End Session

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/end_session"
```

> Sample Response

```json
{
  "negotiation": {
    "id": 285,
    "status": "active_sessions",
    "current_session_number": 1,
    "negotiation_status": "Session 1 - waiting for George's proposal.",
    "arbitration_enabled": true,
    "show_guided_help": true,
    "your_party": {
      "id": 556,
      "name": "Derek Barber",
      "role": "Party A",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "accepted",
      "can_end_session": false,
      "has_ended_session": "yes",
      "has_declared_done": "no",
      "has_accepted": "yes",
      "has_proposed": "yes"
    },
    "other_party": {
      "id": 557,
      "name": "George",
      "role": "Party B",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "unaccepted",
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "session": {
      "final_session": "no"
    },
    "af": {
      "is_configured": "yes",
      "status": "ready",
      "party_lock_id": 0
    },
    "slider_grids_params": {
      "issue_298": {
        "negotiation_id": 285,
        "negotiation_status": "active_sessions",
        "current_session": 1,
        "your_party_id": 556,
        "your_party_status": "active",
        "your_party_issue_preference_set": true,
        "other_party_id": 557,
        "other_party_status": "active",
        "other_party_issue_preference_set": true,
        "issue_id": 298,
        "issue_name": "Amount of spousal support to be paid",
        "issue_description": "Amount of spousal support to pay",
        "issue_formatted_description": "Amount of spousal support to pay (CAD)",
        "has_proposed": true,
        "has_accepted": true,
        "other_party_has_proposed": false,
        "other_party_has_accepted": false,
        "your_party_issue_preference": "higher",
        "preferred_value": 900,
        "unpreferred_value": 500,
        "grid_increment": 10,
        "visible_proposal": 840,
        "acceptance": 840,
        "initial_proposal": 840,
        "has_set_initial_proposal": true,
        "has_walkaway": "no",
        "other_party_issue_preference": "lower",
        "suggestion_set": [
          500,
          510,
          520,
          530,
          540,
          550,
          560,
          570,
          580,
          590,
          600,
          610,
          620,
          630,
          640,
          650,
          660,
          670,
          680,
          690,
          700,
          710,
          720,
          730,
          740,
          750,
          760,
          770,
          780,
          790,
          800,
          810,
          820,
          830,
          840,
          850,
          860,
          870,
          880,
          890,
          900
        ],
        "session_data": [
          840
        ],
        "acceptance_on_grid": true,
        "proposal_on_grid": true
      }
    }
  },
  "success": true
}
```

End the session for this negotiation and the currently authenticated party.

## Declare Final Session

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/declare_final_session"
```

> Sample Response

```json
{
  "negotiation": {
    "id": 285,
    "status": "active_sessions",
    "current_session_number": 1,
    "negotiation_status": "Session 1 <b>(FINAL)</b> - Make final move and click \"Declare Done\"",
    "arbitration_enabled": true,
    "show_guided_help": true,
    "your_party": {
      "id": 556,
      "name": "Derek Barber",
      "role": "Party A",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "accepted",
      "can_end_session": false,
      "has_ended_session": "yes",
      "has_declared_done": "no",
      "has_accepted": "yes",
      "has_proposed": "yes"
    },
    "other_party": {
      "id": 557,
      "name": "George",
      "role": "Party B",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "unaccepted",
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "session": {
      "final_session": "yes"
    },
    "af": {
      "is_configured": "yes",
      "status": "ready",
      "party_lock_id": 0
    },
    "slider_grids_params": {
      "issue_298": {
        "negotiation_id": 285,
        "negotiation_status": "active_sessions",
        "current_session": 1,
        "your_party_id": 556,
        "your_party_status": "active",
        "your_party_issue_preference_set": true,
        "other_party_id": 557,
        "other_party_status": "active",
        "other_party_issue_preference_set": true,
        "issue_id": 298,
        "issue_name": "Amount of spousal support to be paid",
        "issue_description": "Amount of spousal support to pay",
        "issue_formatted_description": "Amount of spousal support to pay (CAD)",
        "has_proposed": true,
        "has_accepted": true,
        "other_party_has_proposed": false,
        "other_party_has_accepted": false,
        "your_party_issue_preference": "higher",
        "preferred_value": 900,
        "unpreferred_value": 500,
        "grid_increment": 10,
        "visible_proposal": 840,
        "acceptance": 840,
        "initial_proposal": 840,
        "has_set_initial_proposal": true,
        "has_walkaway": "no",
        "other_party_issue_preference": "lower",
        "suggestion_set": [
          500,
          510,
          520,
          530,
          540,
          550,
          560,
          570,
          580,
          590,
          600,
          610,
          620,
          630,
          640,
          650,
          660,
          670,
          680,
          690,
          700,
          710,
          720,
          730,
          740,
          750,
          760,
          770,
          780,
          790,
          800,
          810,
          820,
          830,
          840,
          850,
          860,
          870,
          880,
          890,
          900
        ],
        "session_data": [
          840
        ],
        "acceptance_on_grid": true,
        "proposal_on_grid": true
      }
    }
  },
  "success": true
}
```

Declare final session for this negotiation as the currently authenticated party.

Parameter | Acceptable Values  | Required
---------- | -------  | -------
arbitration_accepted | Integer | optional

## Declare All Done

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/declare_all_done"
```

> Sample Response

```json
{
  "negotiation": {
    "id": 285,
    "status": "active_sessions",
    "current_session_number": 1,
    "negotiation_status": "Session 1 <b>(FINAL)</b> - Waiting for George",
    "arbitration_enabled": true,
    "show_guided_help": true,
    "your_party": {
      "id": 556,
      "name": "Derek Barber",
      "role": "Party A",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "accepted",
      "can_end_session": false,
      "has_ended_session": "yes",
      "has_declared_done": "yes",
      "has_accepted": "yes",
      "has_proposed": "yes"
    },
    "other_party": {
      "id": 557,
      "name": "George",
      "role": "Party B",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "unaccepted",
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "session": {
      "final_session": "yes"
    },
    "af": {
      "is_configured": "yes",
      "status": "ready",
      "party_lock_id": 0
    },
    "slider_grids_params": {
      "issue_298": {
        "negotiation_id": 285,
        "negotiation_status": "active_sessions",
        "current_session": 1,
        "your_party_id": 556,
        "your_party_status": "active",
        "your_party_issue_preference_set": true,
        "other_party_id": 557,
        "other_party_status": "active",
        "other_party_issue_preference_set": true,
        "issue_id": 298,
        "issue_name": "Amount of spousal support to be paid",
        "issue_description": "Amount of spousal support to pay",
        "issue_formatted_description": "Amount of spousal support to pay (CAD)",
        "has_proposed": true,
        "has_accepted": true,
        "other_party_has_proposed": false,
        "other_party_has_accepted": false,
        "your_party_issue_preference": "higher",
        "preferred_value": 900,
        "unpreferred_value": 500,
        "grid_increment": 10,
        "visible_proposal": 840,
        "acceptance": 840,
        "initial_proposal": 840,
        "has_set_initial_proposal": true,
        "has_walkaway": "no",
        "other_party_issue_preference": "lower",
        "suggestion_set": [
          500,
          510,
          520,
          530,
          540,
          550,
          560,
          570,
          580,
          590,
          600,
          610,
          620,
          630,
          640,
          650,
          660,
          670,
          680,
          690,
          700,
          710,
          720,
          730,
          740,
          750,
          760,
          770,
          780,
          790,
          800,
          810,
          820,
          830,
          840,
          850,
          860,
          870,
          880,
          890,
          900
        ],
        "session_data": [
          840
        ],
        "acceptance_on_grid": true,
        "proposal_on_grid": true
      }
    }
  },
  "success": true
}
```

Declare all done for this negotiation and the currently authenticated party. All done means the party has locked in their final offers during the final session.

Parameter | Acceptable Values  | Required
---------- | -------  | -------
arbitration_accepted | Integer | optional

## Party Ping

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/party_ping"
```

> Sample Response

```json
{
  "success": true
}
```

Calling this endpoint will update the parties online status. This endpoint should be hit every 5 minutes if possible to allow us to maintain the online/offline status.

## Negotiation Status

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/negotiation_status"
```

> Sample Response

```json
{
  "negotiation": {
    "id": 285,
    "status": "active_sessions",
    "current_session_number": 1,
    "negotiation_status": "Session 1 - waiting for you to make an initial proposal",
    "arbitration_enabled": true,
    "show_guided_help": true,
    "your_party": {
      "id": 556,
      "name": "Jim",
      "role": "Party A",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "accepted",
      "can_end_session": false,
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "other_party": {
      "id": 557,
      "name": "George",
      "role": "Party B",
      "status": "active",
      "arbitration_accepted": false,
      "af_status": "unaccepted",
      "has_ended_session": "no",
      "has_declared_done": "no",
      "has_accepted": "no",
      "has_proposed": "no"
    },
    "session": {
      "final_session": "no"
    },
    "af": {
      "is_configured": "yes",
      "status": "ready",
      "party_lock_id": 0
    },
    "slider_grids_params": {
      "issue_298": {
        "negotiation_id": 285,
        "negotiation_status": "active_sessions",
        "current_session": 1,
        "your_party_id": 556,
        "your_party_status": "active",
        "your_party_issue_preference_set": true,
        "other_party_id": 557,
        "other_party_status": "active",
        "other_party_issue_preference_set": true,
        "issue_id": 298,
        "issue_name": "Amount of spousal support to be paid",
        "issue_description": "Amount of spousal support to pay",
        "issue_formatted_description": "Amount of spousal support to pay (CAD)",
        "has_proposed": false,
        "has_accepted": false,
        "other_party_has_proposed": false,
        "other_party_has_accepted": false,
        "your_party_issue_preference": "higher",
        "preferred_value": 900,
        "unpreferred_value": 500,
        "grid_increment": 10,
        "visible_proposal": 900,
        "acceptance": 900,
        "initial_proposal": 900,
        "walkaway": 500,
        "counter_proposal": 500,
        "counter_initial_proposal": 500,
        "has_set_initial_proposal": false,
        "has_walkaway": "no",
        "other_party_issue_preference": "lower",
        "suggestion_set": [
          500,
          510,
          520,
          530,
          540,
          550,
          560,
          570,
          580,
          590,
          600,
          610,
          620,
          630,
          640,
          650,
          660,
          670,
          680,
          690,
          700,
          710,
          720,
          730,
          740,
          750,
          760,
          770,
          780,
          790,
          800,
          810,
          820,
          830,
          840,
          850,
          860,
          870,
          880,
          890,
          900
        ],
        "session_data": [

        ],
        "acceptance_on_grid": true,
        "proposal_on_grid": true
      }
    }
  },
  "success": true
}
```

Retrieve general information about specific negotiation. All you need to know is the negotiation id. This endpoint is intended to provide support for all the data required to render the negotiaion panel.

## Update Framework Acceptance



## Create Negotiation

A administrator

> Sample Call

```shell
curl --post "https://go.smartsettle.com/api/v1/negotiations"
```

> Sample Payload

```json
{
  "negotiation": {
    "mode": "normal",
    "name": "Party123 vs. BigCorp777",
    "negotiation_template_id": 12,
    "invitee_party_email": "party123@example.com",
    "creator_short_name": "Big Corp",
    "invitee_party_short_name": "Party 123"
  }
}
```

The response from the creation endpoint will be the new negotiation as a json object.

# Issue

## Update Preference

This endpoint is called using a specifc users API creds. That user would be one party of the negotiation.

> Sample Payload

```json
{
  id: issue_id,
  user: 1000,
  opponent: 0
}
```

> Sample Call

```shell
curl --put "https://go.smartsettle.com/api/v1/issues/#{id}/update_preferences"
```

# Party

## Get Party

## Update Party

# User

## Get User

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/users/:id"
```

## Update User

> Sample Call

```shell
curl --put "https://go.smartsettle.com/api/v1/users/:id"
```

## Create User

Creating a User only requries an email address.

> Sample Call

```shell
curl --post "https://go.smartsettle.com/api/v1/users"
```

### Important
After creating a User via the API, be sure to store the email and authentication_token (API token). The email + token will allow you to perform API calls on behalf of the User and render widgets using this Users context.

> Sample Response

```json
{
   "user":{
      "id":92,
      "email":"tony@example.com",
      "name":"",
      "mobile_number":"",
      "completed_setup":true,
      "admin":false,
      "facilitator":false,
      "expert_neutral":false,
      "locale":"en",
      "user_type":"normal",
      "times_invited":0,
      "prompt_stripe_config":false,
      "authentication_token":"K_cHF1ZqW_jsvzgwyRdv"
   }
}
```

# History

## Get all entires

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/history/:negotiation_id"
```

> Sample Response

```json
[
  {
    "id": 12573,
    "entry_type": "visible_concession",
    "body": "GEORGE made an initial proposal of 500",
    "negotiation_id": 285,
    "logged_at": "25 Jul 22:13",
    "time_ago": "2 minutes",
    "party_colour": "78BEF0"
  },
  {
    "id": 12574,
    "entry_type": "secret_acceptance",
    "body": "GEORGE updated their secret acceptance",
    "negotiation_id": 285,
    "logged_at": "25 Jul 22:13",
    "time_ago": "2 minutes",
    "party_colour": "78BEF0"
  },
  {
    "id": 12576,
    "entry_type": "accepted_framework",
    "body": "GEORGE accepted the Framework",
    "negotiation_id": 285,
    "logged_at": "25 Jul 22:13",
    "time_ago": "2 minutes",
    "party_colour": "78BEF0"
  },
  {
    "id": 12563,
    "entry_type": "final_session",
    "body": "Final session has been declared",
    "negotiation_id": 285,
    "logged_at": "25 Jul 21:56",
    "time_ago": "19 minutes",
    "party_colour": null
  },
  {
    "id": 12559,
    "entry_type": "secret_acceptance",
    "body": "JILL updated their secret acceptance from 100 to 840",
    "negotiation_id": 285,
    "logged_at": "25 Jul 21:39",
    "time_ago": "36 minutes",
    "party_colour": "BF607C"
  },
  {
    "id": 12556,
    "entry_type": "visible_concession",
    "body": "JILL made an initial proposal of 840",
    "negotiation_id": 285,
    "logged_at": "25 Jul 21:39",
    "time_ago": "36 minutes",
    "party_colour": "BF607C"
  },
  {
    "id": 12557,
    "entry_type": "secret_acceptance",
    "body": "JILL updated their secret acceptance from 900 to 100",
    "negotiation_id": 285,
    "logged_at": "20 Jul 22:40",
    "time_ago": "5 days",
    "party_colour": "BF607C"
  },
  {
    "id": 12564,
    "entry_type": "accepted_framework",
    "body": "JILL accepted the Framework",
    "negotiation_id": 285,
    "logged_at": "19 Jul 23:14",
    "time_ago": "6 days",
    "party_colour": "BF607C"
  },
  {
    "id": 12562,
    "entry_type": "framework_updated",
    "body": "JILL updated the Framework",
    "negotiation_id": 285,
    "logged_at": "19 Jul 23:14",
    "time_ago": "6 days",
    "party_colour": "BF607C"
  },
  {
    "id": 12561,
    "entry_type": "framework_updated",
    "body": "JILL updated the Framework",
    "negotiation_id": 285,
    "logged_at": "19 Jul 23:14",
    "time_ago": "6 days",
    "party_colour": "BF607C"
  },
  {
    "id": 12555,
    "entry_type": "negotiation_created",
    "body": "Negotiation was created",
    "negotiation_id": 285,
    "logged_at": "19 Jul 23:14",
    "time_ago": "6 days",
    "party_colour": null
  }
]
```

Retrieve the history logs for a given negotiation and context of the currently authenticated party. All you need to know is the negotiation id.

# Automated Negotiation Actions
You can pre schedule moves for each session and issue.

## List Automated Negotiation Actions
> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/automated_negotiation_actions"
```

> Sample Response

```json
{ 
   "automated_negotiation_actions":[ 
      { 
         "id":680,
         "session":1,
         "comment":"This is my best offer",
         "final":null,
         "negotiation_id":337,
         "party_id":571,
         "completed":false,
         "errors":null,
         "not_played":false,
         "automated_issue_actions":[ 
            { 
               "id":680,
               "issue_id":282,
               "visible":"12000",
               "secret":"11000",
               "private_reference_package_id":null,
               "automatic_deal_closer":"500"
            }
         ]
      },
      { 
         "id":681,
         "session":2,
         "comment":null,
         "final":null,
         "negotiation_id":337,
         "party_id":571,
         "completed":false,
         "errors":null,
         "not_played":false,
         "automated_issue_actions":[ 
            { 
               "id":681,
               "issue_id":282,
               "visible":"11000",
               "secret":"10000",
               "private_reference_package_id":null,
               "automatic_deal_closer":"500"
            }
         ]
      },
      { 
         "id":679,
         "session":99,
         "comment":"",
         "final":true,
         "negotiation_id":337,
         "party_id":571,
         "completed":false,
         "errors":null,
         "not_played":false,
         "automated_issue_actions":[ 
            { 
               "id":679,
               "issue_id":282,
               "visible":"10000",
               "secret":"9500",
               "private_reference_package_id":null,
               "automatic_deal_closer":"500"
            }
         ]
      }
   ]
}
```

## Bulk Update/Create Automated Negotiation Actions
> Sample Call

```shell
curl --put "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/automated_negotiation_actions/bulk_update"
```

> Sample Request Payload

```json
{ 
   "negotiation":{ 
      "id":"337",
      "automated_negotiation_actions_attributes":[ 
         { 
            "id":"680",
            "session":"1",
            "comment":"This is my best offer",
            "final":"",
            "negotiation_id":"337",
            "party_id":"571",
            "completed":"false",
            "errors":"",
            "not_played":"false",
            "automated_issue_actions":[ 
               { 
                  "id":"680",
                  "issue_id":"282",
                  "visible":"12000",
                  "secret":"11000",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":"500"
               }
            ],
            "automated_issue_actions_attributes":[ 
               { 
                  "id":"680",
                  "issue_id":"282",
                  "visible":"12000",
                  "secret":"11000",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":"500"
               }
            ]
         },
         { 
            "id":"681",
            "session":"2",
            "comment":"",
            "final":"",
            "negotiation_id":"337",
            "party_id":"571",
            "completed":"false",
            "errors":"",
            "not_played":"false",
            "automated_issue_actions":[ 
               { 
                  "id":"681",
                  "issue_id":"282",
                  "visible":"11000",
                  "secret":"10000",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":"500"
               }
            ],
            "automated_issue_actions_attributes":[ 
               { 
                  "id":"681",
                  "issue_id":"282",
                  "visible":"11000",
                  "secret":"10000",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":"500"
               }
            ]
         },
         { 
            "id":"683",
            "session":"3",
            "comment":"",
            "final":"",
            "negotiation_id":"337",
            "party_id":"571",
            "completed":"false",
            "errors":"",
            "not_played":"false",
            "automated_issue_actions":[ 
               { 
                  "id":"683",
                  "issue_id":"282",
                  "visible":"9000",
                  "secret":"8000",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":""
               }
            ],
            "_destroy":"true",
            "automated_issue_actions_attributes":[ 
               { 
                  "id":"683",
                  "issue_id":"282",
                  "visible":"9000",
                  "secret":"8000",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":""
               }
            ]
         },
         { 
            "id":"679",
            "session":"99",
            "comment":"",
            "final":"true",
            "negotiation_id":"337",
            "party_id":"571",
            "completed":"false",
            "errors":"",
            "not_played":"false",
            "automated_issue_actions":[ 
               { 
                  "id":"679",
                  "issue_id":"282",
                  "visible":"10000",
                  "secret":"9500",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":"500"
               }
            ],
            "automated_issue_actions_attributes":[ 
               { 
                  "id":"679",
                  "issue_id":"282",
                  "visible":"10000",
                  "secret":"9500",
                  "private_reference_package_id":"",
                  "automatic_deal_closer":"500"
               }
            ]
         ]
      }
   }
}
```


# Expert Neutral Negotiation

## List Expert Neutral Negotiations
Use the List Negotiations API endpoint in order retreive the availible cases that are pending END or have completed the END process. Passing account_role_id='expert_neutral' as a parameter will automatically filter negotiations appropriately for use as an END case list.

# Expert Neutral Values

## Update Expert Neutral Values

Parameter | Acceptable Values | Result | Default
---------- | ------- | ------- | -------
expert_neutral_value | String (required) | The value the EN chooses as their opionion | null

> Sample Call

```shell
curl --patch "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/expert_neutral_values/:issue_id?expert_neutral_value=450
```

## Destroy Expert Neutral Values

> Sample Call

```shell
curl --delete "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/expert_neutral_values/:issue_id"
```

## Show Expert Neutral Values

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/negotiations/:negotiation_id/expert_neutral_values/:issue_id"
```

# Expert Neutral Profiles

## List Expert Neutral Profiles

> Sample Call

```shell
curl --get "https://go.smartsettle.com/api/v1/expert_neutral_profiles"
```

## Create Expert Neutral Profiles

> Sample Call

```shell
curl --post "https://go.smartsettle.com/api/v1/expert_neutral_profiles"
```

## Update Expert Neutral Profiles

> Sample Call

```shell
curl --put "https://go.smartsettle.com/api/v1/expert_neutral_profiles/:id"
```

## Destroy Expert Neutral Profiles

> Sample Call

```shell
curl --delete "https://go.smartsettle.com/api/v1/expert_neutral_profiles/:id"
```

# Additional Resources

## Ruby API Wrapper Example

```ruby
class SmartsettleApi

  class SignUpError < StandardError; end
  class UserValidationError < StandardError; end
  class GeneralError < StandardError; end

  include HTTParty

  default_timeout 30
  open_timeout 30
  read_timeout 30

  base_uri((Rails.env.development? ? 'http://' : 'https://') + Rails.application.secrets.smartsettle_api_domain)

  def initialize(user, key)
    # NOTE: Need to merge these options in all API call functions ;)
    @options = { headers: { 'X-User-Email': user, 'X-User-Token': key } }
  end

  def self.admin_api
    # NOTE: Uses any Whitelabel admins API key
    @admin_api ||= new(Rails.application.secrets.smartsettle_username,
                       Rails.application.secrets.smartsettle_api_key)
  end

  def self.user(user)
    @user_api = new(user.smartsettle_email, user.smartsettle_key)
  end

  #
  # Admin API Calls
  #
  # NOTE: An admin API key will be required to use and admin API endpoints
  #

  def create_user(params)
    hash = @options.merge(query: { user: params })
    self.class.post("/users", hash)
  end

  def list_negotiation_templates(params)
    hash = @options.merge(query: params)
    response = self.class.get("/negotiation_templates", hash)
    results = []
    
    Rails.logger.info response

    if response.code == 200
      json = JSON.parse(response.body)
      if json.present?
        json.each do |n|
          os = OpenStruct.new(n)
          os.id = n['id'].to_i
          results << os
        end
      end
    else
      results
    end

    results
  end

  def get_negotiation_template(id, params = {})
    hash = @options.merge(query: { negotiation: params })
    response = self.class.get("/negotiation_templates/#{id}", hash)
    os = OpenStruct.new
    
    Rails.logger.info response

    if response.code == 200
      json = JSON.parse(response.body)
      os = OpenStruct.new(json)
    end

    os
  end

  #
  # Admin Expert Neutral API Calls
  #
  def create_expert_neutral_profile(user_id, params = {})
    params[:user_id] = user_id
    hash = @options.merge(query: { expert_neutral_profile: params }, follow_redirects: false)
    response = self.class.post("/expert_neutral_profiles", hash)
    os = OpenStruct.new
    
    Rails.logger.info response

    if response.code == 200
      json = JSON.parse(response.body)
      os = OpenStruct.new(json)
    end

    os
  end

  #
  # User Expert Neutral API Calls
  #
  def get_end_details(id, params = {})
    hash = @options.merge(query: { negotiation: params })
    response = self.class.get("/negotiations/#{id}/end_details", hash)
    os = OpenStruct.new

    Rails.logger.info response

    if response.code == 200
      json = JSON.parse(response.body)
      os = OpenStruct.new(json['negotiation'])
    end

    os
  end

  def update_expert_neural_value(issue_id, negotiation_id, params)
    hash = @options.merge(query: params)
    response = self.class.put("/negotiations/#{negotiation_id}/expert_neutral_values/#{issue_id}", hash)
    
    Rails.logger.info response
    
    json = {}
    json = JSON.parse(response.body) if response.code == 200

    json
  end

  #
  # User Negotiation API Calls
  #
  def list_negotiations(params)
    hash = @options.merge(query: params)
    response = self.class.get("/negotiations", hash)
    results = []

    Rails.logger.info response

    if response.code == 200
      json = JSON.parse(response.body)
      if json['data'].present?
        json['data'].each do |n|
          results << attributes_to_os(n)
        end
      end
    else
      results
    end

    results
  end

  def create_negotiation(params)
    hash = @options.merge(query: { negotiation: params })
    response = self.class.post("/negotiations", hash)
    os = OpenStruct.new
    json = JSON.parse(response.body)

    Rails.logger.info response

    if response.code == 200
      unless json['errors'].present?
        os = OpenStruct.new(json['negotiation'])
      else
        return json
      end
    end

    os
  end

  def get_negotiation(id, params = {})
    hash = @options.merge(query: { negotiation: params })
    response = self.class.get("/negotiations/#{id}", hash)
    os = OpenStruct.new

    Rails.logger.info response

    if response.code == 200
      json = JSON.parse(response.body)
      os = OpenStruct.new(json['negotiation'])
    end

    os
  end

  def get_negotiation_status(id, params = {})
    hash = @options.merge(query: { negotiation: params })
    response = self.class.get("/negotiations/#{id}/negotiation_status", hash)
    os = OpenStruct.new
    
    Rails.logger.info response

    if response.code == 200
      json = JSON.parse(response.body)
      os = OpenStruct.new(json['negotiation'])
    end

    os
  end

  def update_framework_acceptance(id, params)
    hash = @options.merge(query: params)
    response = self.class.put("/negotiations/#{id}/framework_acceptance", hash)
    
    Rails.logger.info response

    json = {}

    json = JSON.parse(response.body) if response.code == 200

    json
  end

  #
  # User Issue API Calls
  #
  def update_issue_preferences(id, params)
    hash = @options.merge(query: { issue: params })
    response = self.class.put("/issues/#{id}/update_preferences", hash)
    
    Rails.logger.info response

    os = OpenStruct.new

    if response.code == 200
      json = JSON.parse(response.body)
      os = OpenStruct.new(json['issue'])
    end

    os
  end

  #
  # Utility functions
  #
  def attributes_to_os(n)
    os = OpenStruct.new(n['attributes'])
    os.id = n['id'].to_i
    os
  end
end

```